discovery:
    type: com.sonian.elasticsearch.zookeeper.discovery.ZooKeeper
sonian.elasticsearch.zookeeper:
    settings.enabled: true
    client:
        host: zookeeper:2181
        # username: admin
        # password: admin
    discovery.state_publishing.enabled: true
node.name: ${ES_NODE_NAME}
# A node can have generic attributes associated with it, which can later be used
# for customized shard allocation filtering, or allocation awareness. An attribute
# is a simple key value pair, similar to node.key: value, here is an example:
#
#node.rack: rack314
network.publish_host: ${COREOS_PRIVATE_IPV4}
cluster.name: elasticsearch
# These settings directly affect the performance of index and search operations
# in your cluster. Assuming you have enough machines to hold shards and
# replicas, the rule of thumb is:
#
# 1. Having more *shards* enhances the _indexing_ performance and allows to
#    _distribute_ a big index across machines.
# 2. Having more *replicas* enhances the _search_ performance and improves the
#    cluster _availability_.
index.number_of_shards: 10
index.number_of_replicas: 2
path.data: /elasticsearch/data/data-1,/elasticsearch/data/data-2,/elasticsearch/data/data-3
# path.conf: /elasticsearch/conf
#path.work: /path/to/work
#path.logs: /path/to/logs
#path.plugins: /path/to/plugins
plugin.mandatory: zookeeper
gateway.type: local
gateway.recover_after_nodes: 2
# gateway.recover_after_time: 5m
gateway.expected_nodes: 2
#cluster.routing.allocation.node_initial_primaries_recoveries: 4
#cluster.routing.allocation.node_concurrent_recoveries: 2
#indices.recovery.max_bytes_per_sec: 20mb
#indices.recovery.concurrent_streams: 5

################################## Slow Log ##################################
index.search.slowlog.threshold.query.warn: 10s
index.search.slowlog.threshold.query.info: 5s
index.search.slowlog.threshold.query.debug: 2s
index.search.slowlog.threshold.query.trace: 500ms

index.search.slowlog.threshold.fetch.warn: 1s
index.search.slowlog.threshold.fetch.info: 800ms
index.search.slowlog.threshold.fetch.debug: 500ms
index.search.slowlog.threshold.fetch.trace: 200ms

index.indexing.slowlog.threshold.index.warn: 10s
index.indexing.slowlog.threshold.index.info: 5s
index.indexing.slowlog.threshold.index.debug: 2s
index.indexing.slowlog.threshold.index.trace: 500ms

################################## GC Logging ################################
monitor.jvm.gc.young.warn: 1000ms
monitor.jvm.gc.young.info: 700ms
monitor.jvm.gc.young.debug: 400ms

monitor.jvm.gc.old.warn: 10s
monitor.jvm.gc.old.info: 5s
monitor.jvm.gc.old.debug: 2s

################################## Security ################################
#http.jsonp.enable: true
http.cors.enabled: true
http.cors.allow-origin: localhost:8000

# Use the Cluster Health API [http://localhost:9200/_cluster/health], the
# Node Info API [http://localhost:9200/_nodes] or GUI tools
# such as <http://www.elasticsearch.org/overview/marvel/>,
# <http://github.com/karmi/elasticsearch-paramedic>,
# <http://github.com/lukas-vlcek/bigdesk> and
# <http://mobz.github.com/elasticsearch-head> to inspect the cluster state.



# Make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set
# to the same value, and that the machine has enough memory to allocate
# for Elasticsearch, leaving enough memory for the operating system itself.
#
# You should also make sure that the Elasticsearch process is allowed to lock
# the memory, eg. by using `ulimit -l unlimited`.
#bootstrap.mlockall: true
