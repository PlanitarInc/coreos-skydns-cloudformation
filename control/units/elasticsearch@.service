[Unit]
Description=ElasticSearch
Requires=docker.service
After=docker.service
Wants=skydns.service
After=skydns.service
Wants=elasticsearch.volumes@%i.service
After=elasticsearch.volumes@%i.service

[Service]
Type=simple
Restart=on-failure
RestartSec=30
EnvironmentFile=/etc/environment
Environment="TAG=1.3.6"
Environment="ENV=blue"

TimeoutStartSec=5m
ExecStartPre=-/usr/bin/docker kill elasticsearch-%i
ExecStartPre=-/usr/bin/docker rm elasticsearch-%i
ExecStartPre=/usr/bin/docker pull nordstrom/elasticsearch:${TAG}

ExecStart=/usr/bin/docker run \
  --name elasticsearch-%i \
  --hostname elasticsearch-%i.${ENV}.cluster.local \
  --dns-search ${ENV}.cluster.local \
  --env ES_NODE_NAME=elasticsearch-${ENV}-%i \
  --env COREOS_PRIVATE_IPV4=${COREOS_PRIVATE_IPV4} \
  --env SERVICE_ID=elasticsearch-%i \
  --publish 9200:9200 \
  --env SERVICE_9200_NAME=elasticsearch \
  --publish 9300:9300 \
  --env SERVICE_9300_NAME=elasticsearch-peer \
  --volumes-from elasticsearch.volumes-%i \
    nordstrom/elasticsearch:${TAG}

# wait until ElasticSearch is responding on the API port before dependent units get started
# ExecStartPost=/usr/bin/printf "Waiting for ElasticSearch on http://${COREOS_PRIVATE_IPV4}:9200/_cluster/health..."
# ExecStartPost=/bin/bash -c \
#   "until curl http://${COREOS_PRIVATE_IPV4}:9200/_cluster/health >/dev/null 2>&1; do sleep 1; done"

ExecStop=/usr/bin/docker kill elasticsearch-%i

[X-Fleet]
MachineMetadata="role=control"
MachineOf=elasticsearch.volumes@%i.service
Conflicts=elasticsearch@*.service

[Install]
WantedBy=multi-user.target
