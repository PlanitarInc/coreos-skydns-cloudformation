{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CoreOS on EC2: http://coreos.com/docs/running-coreos/cloud-providers/ec2/",
  "Mappings" : {
    "RegionMap" : {
      "ap-northeast-1" : { "AMI" : "ami-7d4c167c" },
      "sa-east-1" : { "AMI" : "ami-c566ced8" },
      "ap-southeast-2" : { "AMI" : "ami-f31a7bc9" },
      "ap-southeast-1" : { "AMI" : "ami-38c09b6a" },
      "us-east-1" : { "AMI" : "ami-5e9f4336" },
      "us-west-2" : { "AMI" : "ami-9db0f5ad" },
      "us-west-1" : { "AMI" : "ami-1b676b5e" },
      "eu-west-1" : { "AMI" : "ami-b29946c5" }
    }
  },
  "Parameters": {
    "InstanceType" : {
      "Description" : "EC2 instance type (m1.small, etc).",
      "Type" : "String",
      "Default" : "t1.micro",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ClusterSize": {
      "Default": "3",
      "MinValue": "3",
      "MaxValue": "12",
      "Description": "Number of nodes in cluster (3-12).",
      "Type": "Number"
    },
    "DiscoveryURL": {
      "Description": "An unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new",
      "Type": "String"
    },
    "AdvertisedIPAddress": {
      "Description": "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.",
      "Default": "private",
      "AllowedValues": ["private", "public"],
      "Type": "String"
    },
    "AllowSSHFrom": {
      "Description": "The net block (CIDR) that SSH is available to.",
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "KeyPair" : {
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the instance.",
      "Type" : "String"
    }
  },
  "Resources": {
    "CoreOSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CoreOS SecurityGroup",
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": { "Ref": "AllowSSHFrom" }
        } ]
      }
    },
    "Ingress4001EtcdPeer": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": { "Ref": "CoreOSSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "4001",
        "ToPort": "4001",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "CoreOSSecurityGroup", "GroupId" ] } 
      }
    },
    "Ingress7001EtcdLeader": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": { "Ref": "CoreOSSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "7001",
        "ToPort": "7001",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "CoreOSSecurityGroup", "GroupId" ] } 
      }
    },
    "Ingress2181ZookeeperClient": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": { "Ref": "CoreOSSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "2181",
        "ToPort": "2181",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "CoreOSSecurityGroup", "GroupId" ] } 
      }
    },
    "Ingress2888ZookeeperPeer": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": { "Ref": "CoreOSSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "2888",
        "ToPort": "2888",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "CoreOSSecurityGroup", "GroupId" ] } 
      }
    },
    "Ingress3888ZookeeperPeer": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": { "Ref": "CoreOSSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "3888",
        "ToPort": "3888",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "CoreOSSecurityGroup", "GroupId" ] } 
      }
    },
    "Ingress9092KafkaBroker": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": { "Ref": "CoreOSSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "9092",
        "ToPort": "9092",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "CoreOSSecurityGroup", "GroupId" ] } 
      }
    },
    "CoreOSServerAutoScale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "CoreOSServerLaunchConfig" },
        "MinSize": "3",
        "MaxSize": "12",
        "DesiredCapacity": { "Ref": "ClusterSize" },
        "Tags": [
            { "Key": "Name", "Value": { "Ref": "AWS::StackName" }, "PropagateAtLaunch": true }
        ]
      }
    },
    "CoreOSServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyPair" },
        "SecurityGroups": [{ "Ref": "CoreOSSecurityGroup" }],
        "IamInstanceProfile": "coreos-beta-elb-registration",
        "UserData" : { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n",
            "\n",
            "users:\n",
            "  - name: skydns\n",
            "    system: true\n",
            "coreos:\n",
            "  update:\n",
            "    reboot-strategy: etcd-lock\n",
            "  etcd:\n",
            "    discovery: ", { "Ref": "DiscoveryURL" }, "\n",
            "    addr: $", { "Ref": "AdvertisedIPAddress" }, "_ipv4:4001\n",
            "    peer-addr: $", { "Ref": "AdvertisedIPAddress" }, "_ipv4:7001\n",
            "  fleet:\n",
            "    metadata: ", "region=", { "Ref": "AWS::Region" }, ",public_ip=$public_ipv4,instance_type=", { "Ref": "InstanceType" }, "\n",
            "    public-ip: ", "$", { "Ref": "AdvertisedIPAddress" }, "_ipv4", "\n",
            "  units:\n",
            "    - name: etcd.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
            "    - name: docker.service\n",
            "      command: start\n",
            "      content: |\n",
            "        .include /usr/lib/systemd/system/docker.service\n",
            "        \n",
            "        [Service]\n",
            "        ExecStart=\n",
            "        ExecStart=/usr/bin/docker -d -s=btrfs -r=false -H fd:// --dns=172.17.42.1 --dns-search=cluster.local\n",
            "    - name: skydns.install.service\n",
            "      command: start\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=SkyDNS Installer\n",
            "        \n",
            "        [Service]\n",
            "        Type=oneshot\n",
            "        RemainAfterExit=true\n",
            "        ExecStart=-/usr/bin/mkdir -p /var/lib/skydns/bin\n",
            "        ExecStart=-/usr/bin/curl -s -o /var/lib/skydns/bin/skydns https://coreos-beta.s3.amazonaws.com/skydns\n",
            "        ExecStart=/usr/bin/chown -R skydns:skydns /var/lib/skydns\n",
            "        ExecStart=/usr/bin/chmod 755 /var/lib/skydns/bin/skydns\n",
            "    - name: skydns.service\n",
            "      command: start\n",
            "      enable: true\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=skydns\n",
            "        Requires=skydns.install.service\n",
            "        Wants=etcd.service\n",
            "        Requires=docker.service\n",
            "        After=skydns.install.service\n",
            "        After=etcd.service\n",
            "        After=docker.service\n",
            "        \n",
            "        [Service]\n",
            "        Type=simple\n",
            "        User=skydns\n",
            "        Group=skydns\n",
            "        Restart=always\n",
            "        RestartSec=5\n",
            "        ReadOnlyDirectories=/etc\n",
            "        EnvironmentFile=/etc/environment\n",
            "        \n",
            "        ExecStartPre=/usr/bin/etcdctl set /skydns/local/cluster/hosts/%m '{\"host\":\"${COREOS_PRIVATE_IPV4}\"}'\n",
            "        ExecStart=/var/lib/skydns/bin/skydns -addr 172.17.42.1:5333 -verbose=true -discover=true -domain cluster.local. -local %m.hosts.cluster.local\n",
            "        ExecStopPost=/usr/bin/etcdctl rm /skydns/local/cluster/hosts/%m\n",
            "        \n",
            "        PermissionsStartOnly=true\n",
            "        # ExecStartPre=/usr/sbin/sysctl -w net.ipv4.ip_forward=1\n",
            "        ExecStartPre=-/sbin/iptables -D INPUT -p udp --dport 5333 -j ACCEPT\n",
            "        ExecStartPre=-/sbin/iptables -t nat -D PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5333\n",
            "        ExecStartPre=/sbin/iptables -A INPUT -p udp --dport 5333 -j ACCEPT\n",
            "        ExecStartPre=/sbin/iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5333\n",
            "        ExecStopPost=/sbin/iptables -D INPUT -p udp --dport 5333 -j ACCEPT\n",
            "        ExecStopPost=/sbin/iptables -t nat -D PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5333\n",
            "        \n",
            "        [Install]\n",
            "        WantedBy=multi-user.target\n",
            "    - name: cadvisor.service\n",
            "      command: start\n",
            "      enable: true\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=cAdvisor\n",
            "        Requires=docker.service\n",
            "        After=docker.service\n",
            "        [Service]\n",
            "        Type=simple\n",
            "        ExecStart=/usr/bin/docker run \\\n",
            "          --volume=/var/run:/var/run:rw \\\n",
            "          --volume=/sys:/sys:ro \\\n",
            "          --volume=/var/lib/docker/:/var/lib/docker:ro \\\n",
            "          --publish=8080:8080 \\\n",
            "          --name=cadvisor \\\n",
            "          google/cadvisor:latest\n",
            "        Restart=always\n",
            "        RestartSec=5\n",
            "        [Install]\n",
            "        WantedBy=multi-user.target\n",
            "    - name: sysinfo_influxdb.service\n",
            "      command: start\n",
            "      enable: true\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=sysinfo_influxdb\n",
            "        Requires=docker.service\n",
            "        After=docker.service\n",
            "        [Service]\n",
            "        Type=simple\n",
            "        Environment=\"ENV=test\"\n",
            "        Restart=always\n",
            "        RestartSec=10\n",
            "        ExecStart=/usr/bin/docker run \\\n",
            "          --name=sysinfo_influxdb \\\n",
            "          --dns-search ${ENV}.cluster.local \\\n",
            "          nordstrom/sysinfo_influxdb:latest\n",
            "write_files:\n",
            "  - path: /etc/profile.d/alias.sh\n",
            "    content: |\n",
            "      alias ll='ls -l'\n",
            "      alias d='docker '\n",
            "      alias ds='docker ps'\n",
            "      alias di='docker images'\n",
            "      alias drm='docker rm -f $(docker ps -qa)'\n",
            "      alias sd='sudo systemctl'\n",
            "      alias cci='sudo coreos-cloudinit --from-file'\n",
            "      alias j='journalctl'\n",
            "      function nsa { sudo nsenter -p -u -m -i -n -t $(docker inspect -f '{{ .State.Pid }}' $1) ; }\n"
            ] ]
          }
        }
      }
    }
  }
}
